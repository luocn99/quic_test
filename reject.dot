digraph handshake {
	label="ProcessPacket";
	"QuicFramer::ProcessPacket"->"visitor_->OnPacket()";
	"visitor_->OnPacket()"->"ProcessPublicHeader";
	"ProcessPublicHeader"->"visitor_->OnUnauthenticatedPublicHeader";
	"visitor_->OnUnauthenticatedPublicHeader" -> "QuicDispatcher::OnUnauthenticatedPublicHeader"[label="visitor_=QuicDispatcher", style=dashed];
	"visitor_->OnUnauthenticatedPublicHeader"->"ProcessDataPacket";
	"ProcessDataPacket"->"QuicFramer::ProcessPacket"[label=rv];
subgraph ProcessDataPacket {
	label = "ProcessDataPacket";
	"ProcessDataPacket"->"ProcessUnauthenticatedHeader"[style=dashed];
	"ProcessUnauthenticatedHeader" ->"DecryptPayload"[label="true"];
	"ProcessUnauthenticatedHeader" ->"ProcessDataPacket"[label="false", style=dashed];
	"ProcessUnauthenticatedHeader"->"visitor_->OnUnauthenticatedHeader"[style=dashed];
	"DecryptPayload"->"visitor_->OnPacketHeader";
	"visitor_->OnPacketHeader"->"ProcessFrameData";
	"ProcessFrameData"->"visitor_->OnPacketComplete()";
	"visitor_->OnPacketComplete()->ProcessDataPacket"[label=true];
}
subgraph ProcessFrameData {
	label="ProcessFrameData";
	"ProcessFrameData"->"ProcessStreamFrame"[label="frame_type & kQuicFrameTypeStreamMask"];
	"ProcessStreamFrame"->"visitor_->OnStreamFrame(frame)";
	"visitor_->OnStreamFrame(frame)"->"ChloFramerVisitor::OnStreamFrame";
}
subgraph ChloFramerVisitorOnStreamFrame {
	label="ChloFramerVisitor::OnStreamFrame";
	"ChloFramerVisitor::OnStreamFrame"->"frame.stream_id == kCryptoStreamId";
	"frame.stream_id == kCryptoStreamId"->"crypto_framer.set_visitor(this)"
	"crypto_framer.set_visitor(this)"->"crypto_framer.ProcessInput(data)";
}

subgraph crypto_framerProcessInput{
	label="crypto_framer.ProcessInput(data)";
	"crypto_framer.ProcessInput(data)"->"Process(input)"[style=dashed];
	"Process(input)"->"visitor_->OnHandshakeMessage";
	"visitor_->OnHandshakeMessage"->"ChloFramerVisitor::OnHandshakeMessage";
}
subgraph ChloFramerVisitorOnHandshakeMessage {
	label = "ChloFramerVisitor::OnHandshakeMessage";
	"ChloFramerVisitor::OnHandshakeMessage"->"delegate_->OnChlo(framer_->version(), connection_id_, message)";
	"delegate_->OnChlo(framer_->version(), connection_id_, message)"->"ChloExtractor::Delegate::OnChlo";
}
subgraph ChloExtractorDelegateOnChlo {
	label = "ChloExtractor::Delegate::OnChlo";
	"ChloExtractor::Delegate::OnChlo"->"rejector_->OnChlo";
}
subgraph OnUnauthenticatedPublicHeader {
	label="OnUnauthenticatedPublicHeader";
	"QuicDispatcher::OnUnauthenticatedPublicHeader"->"session_map_.find(connection_id)";
	"session_map_.find(connection_id)"->"it->second->ProcessUdpPacket"[label="it->second"];
	"it->second->ProcessUdpPacket"->"QuicConnection::ProcessUdpPacket";
	"QuicConnection::ProcessUdpPacket"->"framer_.ProcessPacket(packet)";
	"framer_.ProcessPacket(packet)"->"MaybeProcessUndecryptablePackets()";
	"MaybeProcessUndecryptablePackets()"->"MaybeSendInResponseToPacket()";
	"MaybeSendInResponseToPacket()"->"SetPingAlarm()";
}

subgraph ProcessUnauthenticatedHeader {
	label="ProcessUnauthenticatedHeader";
	"visitor_->OnUnauthenticatedHeader"->"QuicDispatcher::OnUnauthenticatedHeader"[label="visitor_=QuicDispatcher"];
}
subgraph DispatcherOnUnauthenticatedHeader{
	label="QuicDispatcher::OnUnauthenticatedHeader";
	"QuicDispatcher::OnUnauthenticatedHeader"->"ValidityChecks(header)";
	"ValidityChecks(header)"->"MaybeRejectStatelessly"[label="fate == kFateProcess"];
	"ValidityChecks(header)"->"ProcessUnauthenticatedHeaderFate";
}
subgraph MaybeRejectStatelessly {
	label="MaybeRejectStatelessly";
	"MaybeRejectStatelessly"->"ChloExtractor::Extract";
	"ChloExtractor::Extract"->"ProcessStatelessRejectorState";
}

subgraph ProcessStatelessRejectorState {
	label = "ProcessStatelessRejectorState";
	"ProcessStatelessRejectorState"->"ProcessUnauthenticatedHeaderFate";
}

subgraph ProcessUnauthenticatedHeaderFate {
	label = "ProcessUnauthenticatedHeaderFate";
	"ProcessUnauthenticatedHeaderFate"->"ProcessChlo()"[style=dashed];
}

subgraph ProcessChlo {
	label = "ProcessChlo";
	"ProcessChlo()"->"CreateQuicSession"; 
	"CreateQuicSession"->"session_map_.insert";
	"session_map_.insert"->"session->ProcessUdpPacket";
	"session->ProcessUdpPacket"->"QuicConnection::ProcessUdpPacket"[style=dashed];
	"session->ProcessUdpPacket"->"DeliverPacketsToSession";
	"DeliverPacketsToSession"[shape=record,style=dashed];
}

subgraph QuicConnectionProcessUdpPacket {
	label = "QuicConnectionProcessUdpPacket";
	"QuicConnection::ProcessUdpPacket"->"framer_.ProcessPacket";
	"framer.ProcessPacket"->"QuicFramer::ProcessPacket";
	"framer.ProcessPacket"->"MaybeProcessUndecryptablePackets()";
	"MaybeProcessUndecryptablePackets()"->"MaybeSendInResponseToPacket()";
	"MaybeSendInResponseToPacket()"->"SetPingAlarm()";
	"SetPingAlarm()"[shape=record, style=dashed];
}

subgraph CreateQuicSession {
	label = "CreateQuicSession";
	"CreateQuicSession"->"new QuicConnection"[style=dashed];
	"new QuicConnection"->"new QuicSimpleServerSession";
	"new QuicSimpleServerSession"->"session->Initialize()";
	"session->Initialize()"->"QuicServerSessionBase::Initialize()"[style=dashed];
}

subgraph sessionInitialize {
	label = "session->Initialize()";
	"QuicServerSessionBase::Initialize()"->"QuicSpdySession::Initialize()";
}

subgraph "QuicSpdySessionInitialize" {
	label = "QuicSpdySession::Initialize";
	"QuicSpdySession::Initialize()"->"headers_stream_.reset(new QuicHeadersStream(this))";
}

subgraph ChloExtractorExtract {
	"ChloExtractor::Extract"->"QuicFramer framer(versions, QuicTime::Zero(), Perspective::IS_SERVER)";
	"QuicFramer framer(versions, QuicTime::Zero(), Perspective::IS_SERVER)"->"ChloFramerVisitor visitor";
	"ChloFramerVisitor visitor"->"framer.set_visitor(&visitor)";
	"framer.set_visitor(&visitor)"->"framer.ProcessPacket(packet)";
	"framer.ProcessPacket(packet)"->"QuicFramer::ProcessPacket";
}
}
