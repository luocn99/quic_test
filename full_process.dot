digraph handshake {
	label="ProcessPacket";
	"QuicFramer::ProcessPacket"->"visitor_->OnPacket()";
	"visitor_->OnPacket()"->"ProcessPublicHeader";
	"ProcessPublicHeader"->"visitor_->OnUnauthenticatedPublicHeader";
	"visitor_->OnUnauthenticatedPublicHeader" -> "QuicDispatcher::OnUnauthenticatedPublicHeader"[label="visitor_=QuicDispatcher", style=dashed];
	"visitor_->OnUnauthenticatedPublicHeader"->"ProcessDataPacket";
	"ProcessDataPacket"->"QuicFramer::ProcessPacket"[label=rv];
subgraph ProcessDataPacket {
	label = "ProcessDataPacket";
	"ProcessDataPacket"->"ProcessUnauthenticatedHeader"[style=dashed];
	"ProcessUnauthenticatedHeader" ->"DecryptPayload"[label="true"];
	"ProcessUnauthenticatedHeader" ->"ProcessDataPacket"[label="false", style=dashed];
	"ProcessUnauthenticatedHeader"->"visitor_->OnUnauthenticatedHeader"[style=dashed];
	"DecryptPayload"->"visitor_->OnPacketHeader";
	"visitor_->OnPacketHeader"->"ProcessFrameData";
	"ProcessFrameData"->"visitor_->OnPacketComplete()";
	"visitor_->OnPacketComplete()->ProcessDataPacket"[label="true"];
}
subgraph ProcessFrameData {
	label="ProcessFrameData";
	"ProcessFrameData"->"ProcessStreamFrame"[label="frame_type & kQuicFrameTypeStreamMask"];
	"ProcessStreamFrame"->"visitor_->OnStreamFrame(frame)";
	"visitor_->OnStreamFrame(frame)"->"ChloFramerVisitor::OnStreamFrame"[label="visitor_=ChloFramerVisitr", style=dashed];
	"visitor_->OnStreamFrame(frame)"->"QuicConnection::OnStreamFrame"[label="visitor_=QuicConnection", style=dashed];
}

subgraph QuicConnectionOnStreamFrame {
	"QuicConnection::OnStreamFrame"->"QuicSimpleServerSession::OnStreamFrame"[style=dashed];
	"QuicSimpleServerSession::OnStreamFrame"->"QuicSpdySession::OnStreamFrame";
}

subgraph QuicSpdySessionOnStreamFrame {
	"QuicSpdySession::OnStreamFrame"->"QuicSession::OnStreamFrame"[style=dashed];
	"QuicSession::OnStreamFrame"->"GetOrCreateStream(stream_id)";
	"GetOrCreateStream(stream_id)"->"stream->OnStreamFrame";
}

subgraph streamOnStreamFrame {
	"stream->OnStreamFrame"->"QuicStream::OnStreamFrame"[style=dashed];
	"QuicStream::OnStreamFrame"->"sequencer_.OnStreamFrame";
}

subgraph sequencerStreamFrame {
	"sequencer_.OnStreamFrame"->"QuicStreamSequencer::OnStreamFrame"[style=dashed];
	"QuicStreamSequencer::OnStreamFrame"->"stream_->OnDataAvailable()";
	"stream_->OnDataAvailable()"->"QuicCryptoStream::OnDataAvailable()"[style=dashed];
	"QuicCryptoStream::OnDataAvailable()"->"crypto_framer_.ProcessInput";
	"crypto_framer_.ProcessInput"->"crypto_framer_.ProcessInput"[label="while true"];
	"crypto_framer_.ProcessInput"->"CryptoFramer::ProcessInput";
	"CryptoFramer::ProcessInput"->"Process";
	"Process"->"visitor_->OnHandshakeMessage";
	"visitor_->OnHandshakeMessage"->"QuicCryptoServerStream::OnHandshakeMessage"[label="visitor_=QuicCryptoServerStream",style=dashed];
	"QuicCryptoServerStream::OnHandshakeMessage"->"CryptoUtils::HashHandshakeMessage";
	"CryptoUtils::HashHandshakeMessage"->"crypto_config_->ValidateClientHello";
}

subgraph crypto_config_ValidateClientHello {
	"crypto_config_->ValidateClientHello"->"QuicCryptoServerConfig::ValidateClientHello"[style=dashed];
	"QuicCryptoServerConfig::ValidateClientHello"->"EvaluateClientHello";
	"EvaluateClientHello"->"EvaluateClientHelloAfterGetProof";
	"EvaluateClientHelloAfterGetProof"->"helper.ValidationComplete"[style=dashed];
	"helper.ValidationComplete"->"(*done_cb_)->Run";
	"(*done_cb_)->Run"->"QuicCryptoServerStream::ValidateCallback::Run"[style=dashed];
	"QuicCryptoServerStream::ValidateCallback::Run"->"parent_->FinishProcessingHandshakeMessage";
	"parent_->FinishProcessingHandshakeMessage"->"QuicCryptoServerStream::FinishProcessingHandshakeMessage"[style=dashed];
	"QuicCryptoServerStream::FinishProcessingHandshakeMessage"->"ProcessClientHello";
	"ProcessClientHello"->"crypto_config_->ProcessClientHello";
	"crypto_config_->ProcessClientHello"->"QuicCryptoServerConfig::ProcessClientHello"[style=dashed];
	"QuicCryptoServerConfig::ProcessClientHello"->"CryptoUtils::ValidateClientHello";
	"CryptoUtils::ValidateClientHello"->"ProcessClientHelloAfterGetProof";
	"ProcessClientHelloAfterGetProof"->"!requested_config.get()"[style=dashed];
	"!requested_config.get()"->"BuildRejection"[label="true"];
}

subgraph ChloFramerVisitorOnStreamFrame {
	label="ChloFramerVisitor::OnStreamFrame";
	"ChloFramerVisitor::OnStreamFrame"->"frame.stream_id == kCryptoStreamId";
	"frame.stream_id == kCryptoStreamId"->"crypto_framer.set_visitor(this)"
	"crypto_framer.set_visitor(this)"->"crypto_framer.ProcessInput(data)";
}

subgraph crypto_framerProcessInput{
	label="crypto_framer.ProcessInput(data)";
	"crypto_framer.ProcessInput(data)"->"Process"[style=dashed];
	"Process"->"visitor_->OnHandshakeMessage";
	"visitor_->OnHandshakeMessage"->"ChloFramerVisitor::OnHandshakeMessage";
}
subgraph ChloFramerVisitorOnHandshakeMessage {
	label = "ChloFramerVisitor::OnHandshakeMessage";
	"ChloFramerVisitor::OnHandshakeMessage"->"delegate_->OnChlo";
	"delegate_->OnChlo"->"ChloExtractor::Delegate::OnChlo";
}
subgraph ChloExtractorDelegateOnChlo {
	label = "ChloExtractor::Delegate::OnChlo";
	"ChloExtractor::Delegate::OnChlo"->"rejector_->OnChlo";
	"rejector_->OnChlo"->"StatelessRejector::OnChlo";
	"StatelessRejector::OnChlo"[shape=record, style=dashed];
}

subgraph OnUnauthenticatedPublicHeader {
	label="OnUnauthenticatedPublicHeader";
	"QuicDispatcher::OnUnauthenticatedPublicHeader"->"session_map_.find(connection_id)";
	"session_map_.find(connection_id)"->"it->second->ProcessUdpPacket"[label="it->second"];
	"it->second->ProcessUdpPacket"->"QuicConnection::ProcessUdpPacket";
	"QuicConnection::ProcessUdpPacket"->"framer_.ProcessPacket";
	"framer_.ProcessPacket"->"MaybeProcessUndecryptablePackets()";
	"MaybeProcessUndecryptablePackets()"->"MaybeSendInResponseToPacket()";
	"MaybeSendInResponseToPacket()"->"SetPingAlarm()";
}

subgraph ProcessUnauthenticatedHeader {
	label="ProcessUnauthenticatedHeader";
	"visitor_->OnUnauthenticatedHeader"->"QuicDispatcher::OnUnauthenticatedHeader"[label="visitor_=QuicDispatcher"];
}

subgraph DispatcherOnUnauthenticatedHeader{
	label="QuicDispatcher::OnUnauthenticatedHeader";
	"QuicDispatcher::OnUnauthenticatedHeader"->"ValidityChecks(header)";
	"ValidityChecks(header)"->"MaybeRejectStatelessly"[label="fate == kFateProcess"];
	"ValidityChecks(header)"->"ProcessUnauthenticatedHeaderFate";
}
subgraph MaybeRejectStatelessly {
	label="MaybeRejectStatelessly";
	"MaybeRejectStatelessly"->"ChloExtractor::Extract";
	"ChloExtractor::Extract"->"ProcessStatelessRejectorState";
}

subgraph ProcessStatelessRejectorState {
	label = "ProcessStatelessRejectorState";
	"ProcessStatelessRejectorState"->"ProcessUnauthenticatedHeaderFate";
}

subgraph ProcessUnauthenticatedHeaderFate {
	label = "ProcessUnauthenticatedHeaderFate";
	"ProcessUnauthenticatedHeaderFate"->"ProcessChlo()"[style=dashed];
}

subgraph ProcessChlo {
	label = "ProcessChlo";
	"ProcessChlo()"->"CreateQuicSession"; 
	"CreateQuicSession"->"session_map_.insert";
	"session_map_.insert"->"session->ProcessUdpPacket";
	"session->ProcessUdpPacket"->"QuicConnection::ProcessUdpPacket"[style=dashed];
	"session->ProcessUdpPacket"->"DeliverPacketsToSession";
	"DeliverPacketsToSession"[shape=record,style=dashed];
}

subgraph QuicConnectionProcessUdpPacket {
	label = "QuicConnectionProcessUdpPacket";
	"QuicConnection::ProcessUdpPacket"->"framer_.ProcessPacket";
	"framer.ProcessPacket"->"QuicFramer::ProcessPacket";
	"framer.ProcessPacket"->"MaybeProcessUndecryptablePackets()";
	"MaybeProcessUndecryptablePackets()"->"MaybeSendInResponseToPacket()";
	"MaybeSendInResponseToPacket()"->"SetPingAlarm()";
	"SetPingAlarm()"[shape=record, style=dashed];
}

subgraph CreateQuicSession {
	label = "CreateQuicSession";
	"CreateQuicSession"->"new QuicConnection"[style=dashed];
	"new QuicConnection"->"new QuicSimpleServerSession";
	"new QuicSimpleServerSession"->"session->Initialize()";
	"session->Initialize()"->"QuicServerSessionBase::Initialize()"[style=dashed];
}

subgraph sessionInitialize {
	label = "session->Initialize()";
	"QuicServerSessionBase::Initialize()"->"QuicSpdySession::Initialize()";
}

subgraph "QuicSpdySessionInitialize" {
	label = "QuicSpdySession::Initialize";
	"QuicSpdySession::Initialize()"->"headers_stream_.reset(new QuicHeadersStream(this))";
}

subgraph ChloExtractorExtract {
	"ChloExtractor::Extract"->"QuicFramer framer(versions, QuicTime::Zero(), Perspective::IS_SERVER)";
	"QuicFramer framer(versions, QuicTime::Zero(), Perspective::IS_SERVER)"->"ChloFramerVisitor visitor";
	"ChloFramerVisitor visitor"->"framer.set_visitor(&visitor)";
	"framer.set_visitor(&visitor)"->"framer.ProcessPacket";
	"framer.ProcessPacket"->"QuicFramer::ProcessPacket";
}
}
